name: Rust

on: [push]

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
        include:
          - toolchain: stable-x86_64-pc-windows-msvc
            os: windows-latest
          - toolchain: stable-x86_64-apple-darwin
            os: macOS-latest
          - toolchain: stable-x86_64-unknown-linux-gnu
            os: ubuntu-latest

    name: Lint - ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true

      - name: rustup component add
        run: rustup component add rustfmt

      - name: cargo fmt -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --verbose --all -- --check

      - name: rustup component add
        run: rustup component add clippy

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose --all -- -D warnings

  build:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
        include:
          - toolchain: stable-x86_64-pc-windows-msvc
            os: windows-latest
          - toolchain: stable-x86_64-apple-darwin
            os: macOS-latest
          - toolchain: stable-x86_64-unknown-linux-gnu
            os: ubuntu-latest

    name: Build - ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all --all-targets --all-features

      - name: Build Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --all --all-targets --all-features

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all --all-targets --all-features

      - name: Rename an asset
        id: asset
        run: |
          if ${{ contains(matrix.toolchain, 'pc-windows') }}; then
            EXE=.exe
          fi
          EXECUTABLE="./target/release/${GITHUB_REPOSITORY#*/}$EXE"
          ASSET="${GITHUB_REPOSITORY#*/}-${GITHUB_SHA}-${{ matrix.toolchain }}$EXE"
          mv "$EXECUTABLE" "./$ASSET"
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.asset.outputs.asset }}
          path: ${{ steps.asset.outputs.asset }}

  release:
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macOS-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    name: Release - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [lint, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.target }}
          default: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Rename an asset
        id: asset
        run: |
          if ${{ contains(matrix.target, 'pc-windows') }}; then
            EXE=.exe
          fi
          EXECUTABLE="./target/release/${GITHUB_REPOSITORY#*/}$EXE"
          ASSET="${GITHUB_REPOSITORY#*/}-${GITHUB_REF#refs/tags/}-${{ matrix.target }}$EXE"
          mv "$EXECUTABLE" "./$ASSET"
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
